from math import sqrt
from dftd4 import aatoau
#Maximum number of elements supported by GFN2-xTB
import numpy as np
kshell = np.array([1.85, 2.23, 2.23, 2.23],dtype=np.float64) #K^Gamma_l
maxElem = 86
gfn2Kinds = np.array([
  1,                                                 1, # H-He
  1, 1,                               1, 1, 1, 1, 1, 1, # Li-Ne
  1, 1,                               1, 1, 1, 1, 1, 1, # Na-Ar
  1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, # K-Kr
  1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, # Rb-Xe
  1, 1,                                                 # Cs/Ba
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,       # La-Lu
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, # Lu-Rn
  1, 1,                                                 
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,       #Fr-
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1  # -Og
],dtype=np.int8)
kExpHeavy = 1.5
kExpLight = 1.0
rExp = 1.0
repAlpha = np.array([ #alpha_A
    2.213717, 3.604670, 0.475307, 0.939696, 1.373856,
    1.247655, 1.682689, 2.165712, 2.421394, 3.318479,
    0.572728, 0.917975, 0.876623, 1.187323, 1.143343,
    1.214553, 1.577144, 0.896198, 0.482206, 0.683051,
    0.574299, 0.723104, 0.928532, 0.966993, 1.071100,
    1.113422, 1.241717, 1.077516, 0.998768, 1.160262,
    1.122923, 1.222349, 1.249372, 1.230284, 1.296174,
    0.908074, 0.574054, 0.697345, 0.706172, 0.681106,
    0.865552, 1.034519, 1.019565, 1.031669, 1.094599,
    1.092745, 0.678344, 0.936236, 1.024007, 1.139959,
    1.122937, 1.000712, 1.017946, 1.012036, 0.585257,
    0.716259, 0.737643, 0.729950, 0.734624, 0.739299,
    0.743973, 0.748648, 0.753322, 0.757996, 0.762671,
    0.767345, 0.772020, 0.776694, 0.781368, 0.786043,
    0.790717, 0.852852, 0.990234, 1.018805, 1.170412,
    1.221937, 1.197148, 1.204081, 0.919210, 1.137360,
    1.399312, 1.179922, 1.130860, 0.957939, 0.963878,
    0.965577],dtype=np.float64)
repZeff = np.array([ #Zeff/Yeff
      1.105388,  1.094283,  1.289367,  4.221216,  7.192431,
      4.231078,  5.242592,  5.784415,  7.021486, 11.041068,
      5.244917, 18.083164, 17.867328, 40.001111, 19.683502,
     14.995090, 17.353134,  7.266606, 10.439482, 14.786701,
      8.004267, 12.036336, 15.677873, 19.517914, 18.760605,
     20.360089, 27.127744, 10.533269,  9.913846, 22.099503,
     31.146750, 42.100144, 39.147587, 27.426779, 32.845361,
     17.363803, 44.338211, 34.365525, 17.326237, 24.263093,
     30.562732, 48.312796, 44.779882, 28.070247, 38.035941,
     28.674700,  6.493286, 26.226628, 63.854240, 80.053438,
     77.057560, 48.614745, 63.319176, 51.188398, 67.249039,
     46.984607, 50.927529, 48.676714, 47.669448, 46.662183,
     45.654917, 44.647651, 43.640385, 42.633120, 41.625854,
     40.618588, 39.611322, 38.604057, 37.596791, 36.589525,
     35.582259, 40.186772, 54.666156, 55.899801, 80.410086,
     62.809871, 56.045639, 53.881425, 14.711475, 51.577544,
     58.801614,102.368258,132.896832, 52.301232, 81.771063,
    128.133580],dtype=np.float64)

chemicalHardness = np.array([ #eta_A
     0.405771, 0.642029, 0.245006, 0.684789, 0.513556,
     0.538015, 0.461493, 0.451896, 0.531518, 0.850000,
     0.271056, 0.344822, 0.364801, 0.720000, 0.297739,
     0.339971, 0.248514, 0.502376, 0.247602, 0.320378,
     0.472633, 0.513586, 0.589187, 0.396299, 0.346651,
     0.271594, 0.477760, 0.344970, 0.202969, 0.564152,
     0.432236, 0.802051, 0.571748, 0.235052, 0.261253,
     0.424373, 0.210481, 0.340000, 0.711958, 0.461440,
     0.952957, 0.586134, 0.368054, 0.711205, 0.509183,
     0.273310, 0.263740, 0.392012, 0.461812, 0.900000,
     0.942294, 0.750000, 0.383124, 0.424164, 0.236569,
     0.245937, 0.597716, 0.662889, 0.660710, 0.658531,
     0.656352, 0.654173, 0.651994, 0.649815, 0.647635,
     0.645456, 0.643277, 0.641098, 0.638919, 0.636740,
     0.634561, 0.662597, 0.449812, 0.685426, 0.224623,
     0.364388, 0.548507, 0.353574, 0.438997, 0.457611,
     0.418841, 0.168152, 0.900000, 1.023267, 0.288848,
     0.303400],dtype=np.float64)

thirdOrderAtom = np.array([#Gamma_A
     0.800000, 2.000000, 1.303821, 0.574239, 0.946104,
     1.500000,-0.639780,-0.517134, 1.426212, 0.500000,
     1.798727, 2.349164, 1.400000, 1.936289, 0.711291,
     -0.501722, 1.495483,-0.315455, 2.033085, 2.006898,
     0.500000, 1.767268, 0.900000, 0.300000, 0.600000,
     -0.500000, 0.300000,-0.200000, 0.500000, 2.312896,
     2.334269,-0.064775, 1.106041, 0.913725, 1.300000,
     0.239815, 2.916203, 1.800000, 0.100000, 0.700000,
     0.500000, 0.919928, 0.600000,-0.500000, 0.300000,
     0.800000, 0.200000, 2.073217, 1.900000,-0.178396,
     1.100000, 0.953683, 1.200000,-0.118925, 2.404185,
     2.069097, 0.012793,-0.100000,-0.100002,-0.100004,
     -0.100006,-0.100008,-0.100010,-0.100012,-0.100013,
     -0.100015,-0.100017,-0.100019,-0.100021,-0.100023,
     -0.100025,-0.100000, 0.200000,-0.200000, 0.800000,
     0.800000,-0.100000, 0.600000, 0.850000,-0.116312,
     -0.533933, 0.200000,-0.337508, 1.877978, 1.846485,
     0.097834],dtype=np.float64) * 0.1
shellHardness = np.array([ #k_A^l
     0.0, 0.0000000, 0.0000000, 0.0, 0.0000000, 0.0000000,
     0.0, 0.1972612, 0.0000000, 0.0, 0.9658467, 0.0000000,
     0.0, 0.3994080, 0.0000000, 0.0, 0.1056358, 0.0000000,
     0.0, 0.1164892, 0.0000000, 0.0, 0.1497020, 0.0000000,
     0.0, 0.1677376, 0.0000000, 0.0, 0.1190576,-0.3200000,
     0.0, 0.1018894, 0.0000000, 0.0, 1.4000000,-0.0500000,
     0.0,-0.0603699, 0.2000000, 0.0,-0.5580042,-0.2300000,
     0.0,-0.1558060,-0.3500000, 0.0,-0.1085866,-0.2500000,
     0.0, 0.4989400, 0.5000000, 0.0,-0.0461133,-0.0100000,
     0.0, 0.3483655, 0.0000000, 0.0, 1.5000000,-0.2500000,
     0.0,-0.0800000,-0.2046716, 0.0,-0.3800000,-0.4921114,
     0.0,-0.4500000,-0.0379088, 0.0,-0.4700000, 0.7405872,
     0.0,-0.6000000, 0.0545811, 0.0,-0.6500000, 0.4046615,
     0.0,-0.6500000,-0.2418493, 0.0,-0.6000000,-0.0611188,
     0.0, 0.0700000, 1.3333066, 0.0, 0.0684343, 0.0000000,
     0.0,-0.5416555,-0.3000000, 0.0,-0.3809089,-0.1500000,
     0.0,-0.4104743,-0.5000000, 0.0, 0.1192113,-0.2500000,
     0.0, 0.5203002, 0.4000000, 0.0,-0.2503223,-0.0700000,
     0.0, 0.9386493, 0.0000000, 0.0, 1.5000000,-0.2500000,
     0.0,-0.4500000,-0.3349288, 0.0,-0.1100000,-0.4422630,
     0.0,-0.0500000,-0.3562950, 0.0,-0.3000000,-0.4301371,
     0.0,-0.6000000, 0.3956819, 0.0,-0.6500000,-0.3052305,
     0.0,-0.6500000,-0.1881774, 0.0,-0.6000000, 0.0931707,
     0.0,-0.0300000, 0.8024848, 0.0, 0.2388669, 0.0000000,
     0.0,-0.5867460,-0.2800000, 0.0,-0.5090746,-0.0600000,
     0.0,-0.6278501,-0.5500000, 0.0,-0.1555334, 0.0600000,
     0.0,-0.0338735, 0.3000000, 0.0,-0.2302667,-0.2300000,
     0.0, 0.2494305, 0.0000000, 0.0, 2.2247532,-0.2300000,
     0.0,-0.3000000,-0.4699666, 0.0,-0.3000000,-0.5539659,
     0.0,-0.2769230,-0.5462784, 0.0,-0.2538460,-0.5385909,
     0.0,-0.2307691,-0.5309034, 0.0,-0.2076921,-0.5232158,
     0.0,-0.1846151,-0.5155283, 0.0,-0.1615381,-0.5078408,
     0.0,-0.1384612,-0.5001533, 0.0,-0.1153842,-0.4924658,
     0.0,-0.0923072,-0.4847782, 0.0,-0.0692302,-0.4770907,
     0.0,-0.0461533,-0.4694032, 0.0,-0.0230763,-0.4617157,
     0.0, 0.0000007,-0.4540282, 0.0, 0.1000000,-0.4486165,
     0.0, 0.0500000,-0.3394380, 0.0, 0.3700000,-0.3419199,
     0.0,-0.6000000, 0.6586864, 0.0,-0.6500000, 0.1350223,
     0.0,-0.6500000,-0.0977957, 0.0,-0.6000000,-0.0203212,
     0.0,-0.6000000, 0.0614126, 0.0,-0.5375121, 0.0000000,
     0.0,-0.7133401, 0.0000000, 0.0, 0.7838251, 0.0000000,
     0.0,-0.6000000, 0.0000000, 0.0,-0.8109155, 0.0000000,
     0.0,-0.2532073, 0.2500000, 0.0,-0.0302388,-0.2300000], dtype=np.float64).reshape(-1,3)

dipDamp = 3.0 # a3

# Damping parameter for dipole-dipole, charge-quadrupole interactions
quadDamp = 4.0 # a5

# Coordination number shift
cnShift = 1.2 # \Delta_val

# Coordination number exponent for radii
cnExp = 4.0

# Maximum radius
cnRMax = 5.0 # R_max

# Dipole exchange-correlation kernel
dipKernel = np.array([ #f^mu
     5.563889,-1.000000,-0.500000,-0.613341,-0.481186,
     -0.411674, 3.521273,-4.935670,-8.339183,10.000000,
     0.000000,-0.082005, 2.633341,-0.025750, 2.110225,
     -0.151117,-2.536958,-2.077329,-0.103383,-0.236675,
     -0.515177,-0.434506,-0.350000, 0.149669,-0.759168,
     0.412929,-0.247938,-1.261887,-0.700000,-0.100000,
     0.267219, 0.108460,-0.201294,-0.288648,-1.088586,
     -0.889357,-0.093328,-0.459925,-0.637291,-0.599615,
     -0.288729, 0.346327,-0.458416,-0.081922, 0.007016,
     -0.310361,-0.800314,-0.105364, 0.951079, 0.085029,
     -0.015519,-0.263414,-0.603648,-0.214447,-0.080000,
     -0.260000,-0.395198,-0.723806,-0.704819,-0.685832,
     -0.666845,-0.647858,-0.628871,-0.609884,-0.590897,
     -0.571910,-0.552923,-0.533936,-0.514949,-0.495961,
     -0.476974,-0.537685,-0.200343, 0.065886,-0.587636,
     -0.510090,-0.673822,-0.423684, 0.393418,-0.250000,
     0.374018, 1.007016,-0.737252,-1.344854,-0.348123,
     -0.167597], dtype=np.float64) * 0.01
# Quadrupole exchange-correlation kernel
quadKernel = np.array([#f^Theta
     0.027431,-0.337528, 0.020000,-0.058586,-0.058228,
     0.213583, 2.026786,-0.310828,-0.245955,-0.500000,
     0.020000,-0.005516,-0.021887,-0.080000, 0.028679,
     0.442859, 0.122783,-1.083404, 0.025000, 0.010000,
     -0.042004, 0.059660, 0.009764, 0.137744, 0.229903,
     0.267734, 0.048237,-0.080000,-0.345631, 0.007658,
     -0.003616,-0.003589, 0.014149, 0.085728, 0.216935,
     -0.415024, 0.015000, 0.015000, 0.010460,-0.012944,
     0.041491, 0.312549, 0.155242, 0.359228, 0.008570,
     -0.040485,-0.020810, 0.012250,-0.002031,-0.008243,
     -0.020630,-0.026864, 0.069660,-0.156200, 0.008000,
     0.015000,-0.030000,-0.025000,-0.024615,-0.024231,
     -0.023846,-0.023462,-0.023077,-0.022692,-0.022308,
     -0.021923,-0.021538,-0.021154,-0.020769,-0.020385,
     -0.020000,-0.016478, 0.039599, 1.063309, 0.306870,
     0.759049, 0.322935, 0.098019,-0.020320,-0.032901,
     -0.008506,-0.001670, 0.162529, 0.013818, 0.021624,
     -0.111556],dtype=np.float64) * 0.01
# HAMILTONIAN DATA
# Number of shells
nShell = np.array([
     1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
     2, 2, 2, 2, 3, 3],dtype=np.int8)

# Angular momentum of each shell
angShell = np.array([
     0, 0, 0,  0, 1, 0,  0, 1, 0,  0, 1, 0,  0, 1, 0,  0, 1, 0,  0, 1, 0,
     0, 1, 0,  0, 1, 0,  0, 1, 2,  0, 1, 0,  0, 1, 2,  0, 1, 2,  0, 1, 2,
     0, 1, 2,  0, 1, 2,  0, 1, 2,  0, 1, 2,  0, 1, 0,  0, 1, 2,  2, 0, 1,
     2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,
     2, 0, 1,  0, 1, 0,  0, 1, 2,  0, 1, 2,  0, 1, 2,  0, 1, 2,  0, 1, 2,
     0, 1, 2,  0, 1, 0,  0, 1, 2,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,
     2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  0, 1, 0,  0, 1, 2,
     0, 1, 2,  0, 1, 2,  0, 1, 2,  0, 1, 2,  0, 1, 2,  0, 1, 0,  0, 1, 2,
     2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,
     2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,
     2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,  2, 0, 1,
     2, 0, 1,  2, 0, 1,  0, 1, 0,  0, 1, 0,  0, 1, 0,  0, 1, 0,  0, 1, 0,
     0, 1, 2,  0, 1, 2],dtype=np.int8).reshape(-1,3)

# Principal quantum number of each shell
principalQuantumNumber = np.array([
     1, 0, 0,  1, 2, 0,  2, 2, 0,  2, 2, 0,  2, 2, 0,  2, 2, 0,  2, 2, 0,
     2, 2, 0,  2, 2, 0,  2, 2, 3,  3, 3, 0,  3, 3, 3,  3, 3, 3,  3, 3, 3,
     3, 3, 3,  3, 3, 3,  3, 3, 3,  3, 3, 3,  4, 4, 0,  4, 4, 3,  3, 4, 4,
     3, 4, 4,  3, 4, 4,  3, 4, 4,  3, 4, 4,  3, 4, 4,  3, 4, 4,  3, 4, 4,
     3, 4, 4,  4, 4, 0,  4, 4, 4,  4, 4, 4,  4, 4, 4,  4, 4, 4,  4, 4, 4,
     4, 4, 4,  5, 5, 0,  5, 5, 4,  4, 5, 5,  4, 5, 5,  4, 5, 5,  4, 5, 5,
     4, 5, 5,  4, 5, 5,  4, 5, 5,  4, 5, 5,  4, 5, 5,  5, 5, 0,  5, 5, 5,
     5, 5, 5,  5, 5, 5,  5, 5, 5,  5, 5, 5,  5, 5, 5,  6, 6, 0,  6, 6, 5,
     5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,
     5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,
     5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,  5, 6, 6,
     5, 6, 6,  5, 6, 6,  6, 6, 0,  6, 6, 0,  6, 6, 0,  6, 6, 0,  6, 6, 0,
     6, 6, 5,  6, 6, 5],dtype=np.int8).reshape(-1,3)

# Reference occupation of the atom
referenceOcc = np.array([
     1.0, 0.0, 0.0,  2.0, 0.0, 0.0,  1.0, 0.0, 0.0,
     2.0, 0.0, 0.0,  2.0, 1.0, 0.0,  1.0, 3.0, 0.0,
     1.5, 3.5, 0.0,  2.0, 4.0, 0.0,  2.0, 5.0, 0.0,
     2.0, 6.0, 0.0,  1.0, 0.0, 0.0,  2.0, 0.0, 0.0,
     2.0, 1.0, 0.0,  1.5, 2.5, 0.0,  1.5, 3.5, 0.0,
     2.0, 4.0, 0.0,  2.0, 5.0, 0.0,  2.0, 6.0, 0.0,
     1.0, 0.0, 0.0,  2.0, 0.0, 0.0,  1.0, 1.0, 1.0,
     1.0, 1.0, 2.0,  1.0, 1.0, 3.0,  1.0, 1.0, 4.0,
     1.0, 1.0, 5.0,  1.0, 1.0, 6.0,  1.0, 1.0, 7.0,
     1.0, 1.0, 8.0,  1.0, 0.0,10.0,  2.0, 0.0, 0.0,
     2.0, 1.0, 0.0,  1.5, 2.5, 0.0,  1.5, 3.5, 0.0,
     2.0, 4.0, 0.0,  2.0, 5.0, 0.0,  2.0, 6.0, 0.0,
     1.0, 0.0, 0.0,  2.0, 0.0, 0.0,  1.0, 1.0, 1.0,
     1.0, 1.0, 2.0,  1.0, 1.0, 3.0,  1.0, 1.0, 4.0,
     1.0, 1.0, 5.0,  1.0, 1.0, 6.0,  1.0, 1.0, 7.0,
     1.0, 1.0, 8.0,  1.0, 0.0,10.0,  2.0, 0.0, 0.0,
     2.0, 1.0, 0.0,  2.0, 2.0, 0.0,  2.0, 3.0, 0.0,
     2.0, 4.0, 0.0,  2.0, 5.0, 0.0,  2.0, 6.0, 0.0,
     1.0, 0.0, 0.0,  2.0, 0.0, 0.0,  1.0, 1.0, 1.0,
     1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
     1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
     1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
     1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
     1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 2.0,
     1.0, 1.0, 3.0,  1.0, 1.0, 4.0,  1.0, 1.0, 5.0,
     1.0, 1.0, 6.0,  1.0, 1.0, 7.0,  1.0, 1.0, 8.0,
     1.0, 0.0,10.0,  2.0, 0.0, 0.0,  2.0, 1.0, 0.0,
     2.0, 2.0, 0.0,  2.0, 3.0, 0.0,  2.0, 4.0, 0.0,
     2.0, 5.0, 0.0,  2.0, 6.0, 0.0], dtype=np.float64).reshape(-1,3)

# Shell polynomials to scale Hamiltonian elements
shellPoly = np.array([ #k^poly_A,l
     -0.953618,  0.000000,  0.000000,  0.000000,
     -4.386816,  0.710647,  0.000000,  0.000000,
     -4.750398, 20.424920,  0.000000,  0.000000,
     -7.910394, -0.476438,  0.000000,  0.000000,
     -5.183150, -2.453322,  0.000000,  0.000000,
     -2.294321, -0.271102,  0.000000,  0.000000,
     -8.506003, -2.504201,  0.000000,  0.000000,
     -14.955291, -3.350819,  0.000000,  0.000000,
     -13.011924,-12.300828,  0.000000,  0.000000,
     -16.377759, -4.860545,-16.922333,  0.000000,
     -4.033495, 20.873908,  0.000000,  0.000000,
     -11.167374, 39.076962, 12.691061,  0.000000,
     -10.678141,-12.442837, 16.311089,  0.000000,
      2.358522, -7.900406, 11.366185,  0.000000,
     -19.831771, -5.515577, 26.397535,  0.000000,
     -25.855520, -8.048064, 25.993857,  0.000000,
     -16.562004, -6.986430, 38.045622,  0.000000,
     -23.893924, -3.727322, 26.812872,  0.000000,
     -6.076060, 21.187329,  0.000000,  0.000000,
     -9.718719, 31.973372,  9.528649,  0.000000,
      0.686569, 38.044933,-34.502301,  0.000000,
      4.561234, 51.801626,-27.724389,  0.000000,
      9.702482, 51.178301,-29.827563,  0.000000,
     13.376234, 48.092152,-27.971622,  0.000000,
     28.519691, 26.346555,-31.255885,  0.000000,
     11.527794, 39.459890,-28.614961,  0.000000,
      9.168460, 25.424719,-22.355636,  0.000000,
     20.839550, 30.886445,-25.385640,  0.000000,
     17.798264, 14.977818,-26.508943,  0.000000,
     -9.240315, 22.271839,  0.000000,  0.000000,
     -19.018211, -1.137790, 35.401863,  0.000000,
     -21.333673, -9.749043, 28.634699,  0.000000,
     -23.820664,-10.644177, 30.711130,  0.000000,
     -24.506414,-13.765750, 29.611132,  0.000000,
     -25.005079,-14.520078, 36.614038,  0.000000,
     -32.658744,-13.600093, 23.204749,  0.000000,
      4.325404, 23.255114,  0.000000,  0.000000,
     -14.506782, 20.213982, 10.816244,  0.000000,
     -2.125866, 52.161869,-39.529477,  0.000000,
      7.538902, 58.914069,-28.358876,  0.000000,
     -5.141080, 55.654247,-27.963746,  0.000000,
     -0.583137, 29.199580,-22.573688,  0.000000,
     36.096045, 25.095742,-27.342552,  0.000000,
     10.106270, 34.028722,-27.583213,  0.000000,
     15.413317, 31.070684,-19.656064,  0.000000,
      6.200145, 45.341322,-27.173113,  0.000000,
      1.091490, 11.561444,-16.490742,  0.000000,
     -6.076865, 37.671924,  0.000000,  0.000000,
     -21.938535, -1.949646, 31.354500,  0.000000,
     -17.518223, -7.802870, 12.611148,  0.000000,
     -17.543533,-12.494609, 30.872654,  0.000000,
     -24.893875,-11.231996, 31.843215,  0.000000,
     -26.957547,-14.183312, 28.211905,  0.000000,
     -31.096492,-16.197851, 19.048983,  0.000000,
     -0.713637, 20.636967,  0.000000,  0.000000,
     -14.036589, 18.774072, 11.389672,  0.000000,
     -6.732008, 54.136379,-37.820063,  0.000000,
     -6.107742, 37.663425,-41.989203,  0.000000,
     -6.040165, 38.194756,-41.286513,  0.000000,
     -5.972588, 38.726087,-40.583824,  0.000000,
     -5.905010, 39.257419,-39.881134,  0.000000,
     -5.837433, 39.788750,-39.178445,  0.000000,
     -5.769856, 40.320081,-38.475755,  0.000000,
     -5.702279, 40.851412,-37.773066,  0.000000,
     -5.634701, 41.382743,-37.070376,  0.000000,
     -5.567124, 41.914074,-36.367686,  0.000000,
     -5.499547, 42.445406,-35.664997,  0.000000,
     -5.431970, 42.976737,-34.962307,  0.000000,
     -5.364392, 43.508068,-34.259618,  0.000000,
     -5.296815, 44.039399,-33.556928,  0.000000,
     -5.229238, 44.570730,-32.854239,  0.000000,
     -2.731930, 33.515028,-34.095699,  0.000000,
     -15.707734, 60.186026,-30.396333,  0.000000,
      6.208982, 49.273770,-25.677080,  0.000000,
     13.890139, 33.973283,-31.723059,  0.000000,
     21.316847, 28.097231,-28.461111,  0.000000,
     20.733836, 18.303210,-24.693443,  0.000000,
      6.737556, 19.259455,-27.243898,  0.000000,
      4.691539, 25.250274, -6.410815,  0.000000,
     -9.833449, 15.628858,  0.000000,  0.000000,
     -22.942207, 13.109821,  0.000000,  0.000000,
     -22.955084, -8.805272,  0.000000,  0.000000,
     -21.750059,-10.773930,  0.000000,  0.000000,
     -20.923290,-18.426448,  0.000000,  0.000000,
     -30.549981,-17.108490, 23.824993,  0.000000,
     -35.245372,-11.989735, 21.167024,  0.000000],dtype = np.float64).reshape(-1,4)

# Coordination number dependence of the atomic levels
kCN = np.array([ # h^l_(CN'_A)
     -0.0500000, 0.0000000, 0.0000000, 0.0000000,
     0.2074275, 0.0000000, 0.0000000, 0.0000000,
     0.1620836,-0.0623876, 0.0000000, 0.0000000,
     0.1187759, 0.0550528, 0.0000000, 0.0000000,
     0.0120462,-0.0141086, 0.0000000, 0.0000000,
     -0.0102144, 0.0161657, 0.0000000, 0.0000000,
     -0.1955336, 0.0561076, 0.0000000, 0.0000000,
     0.0117826,-0.0145102, 0.0000000, 0.0000000,
     0.0394362,-0.0538373, 0.0000000, 0.0000000,
     -0.0014933, 0.0232093, 0.1096714, 0.0000000,
     -0.0042211,-0.0144323, 0.0000000, 0.0000000,
     0.1164444,-0.0079924, 0.1192409, 0.0000000,
     0.0715422,-0.0244485, 0.0406173, 0.0000000,
     0.1858479,-0.1383073,-0.1935494, 0.0000000,
     0.0547610,-0.0489930, 0.2429507, 0.0000000,
     -0.0256951,-0.0098465, 0.2007690, 0.0000000,
     0.0617972,-0.0181618, 0.1672768, 0.0000000,
     0.0000554, 0.0065921,-0.2732165, 0.0000000,
     -0.0339245, 0.0174542, 0.0000000, 0.0000000,
     0.0570930,-0.0074926, 0.1013752, 0.0000000,
     0.0991293,-0.0281241, 0.2026777, 0.0000000,
     0.1007021,-0.0237074, 0.1028188, 0.0000000,
     0.0235696,-0.0108232, 0.0164476, 0.0000000,
     -0.0232087,-0.0188919, 0.0289291, 0.0000000,
     -0.0275000,-0.0015839,-0.0195827, 0.0000000,
     -0.4049876,-0.0756480,-0.0274654, 0.0000000,
     -0.0227872, 0.0076513, 0.0121980, 0.0000000,
     0.0310301, 0.0226796,-0.0066417, 0.0000000,
     0.3349047,-0.2619446,-0.0173684, 0.0000000,
     0.2011910,-0.0055135, 0.0000000, 0.0000000,
     -0.0234627, 0.1305831, 0.0165604, 0.0000000,
     0.0361068,-0.0014474,-0.1042559, 0.0000000,
     -0.0129640,-0.0236470, 0.2330144, 0.0000000,
     -0.0061654,-0.0435018, 0.2768559, 0.0000000,
     0.0006150,-0.0058347, 0.2250180, 0.0000000,
     -0.0070305, 0.0076023, 0.0349523, 0.0000000,
     -0.1516926, 0.0203437, 0.0000000, 0.0000000,
     0.0409020,-0.0418725, 0.0401255, 0.0000000,
     0.1937516,-0.0641897,-0.1270337, 0.0000000,
     0.1266548, 0.0279435,-0.0566943, 0.0000000,
     0.2555962,-0.0002341,-0.1356485, 0.0000000,
     0.3008411,-0.1040348, 0.0620172, 0.0000000,
     -0.0586205,-0.0087319,-0.0066526, 0.0000000,
     0.4471162,-0.0034723,-0.0263914, 0.0000000,
     0.0066741,-0.0213308, 0.0104368, 0.0000000,
     0.0266820, 0.0503075, 0.0060285, 0.0000000,
     -0.0065794, 0.1677171,-0.0062719, 0.0000000,
     0.1418145,-0.0309814, 0.0000000, 0.0000000,
     -0.0098312, 0.0994688, 0.0168649, 0.0000000,
     -0.0454629,-0.0320651,-0.1459407, 0.0000000,
     -0.0147626,-0.0091175, 0.1602872, 0.0000000,
     0.0115389,-0.0082051, 0.3013228, 0.0000000,
     -0.0506150, 0.0084766, 0.3077127, 0.0000000,
     -0.0020195, 0.0017246, 0.0327039, 0.0000000,
     -0.1312604,-0.0100000, 0.0000000, 0.0000000,
     0.0352001,-0.0926576, 0.0147995, 0.0000000,
     0.1071684,-0.0239967,-0.0777542, 0.0000000,
     0.1335148,-0.0198320,-0.0638958, 0.0000000,
     0.1349441,-0.0198184,-0.0543909, 0.0000000,
     0.1363734,-0.0198048,-0.0448861, 0.0000000,
     0.1378028,-0.0197912,-0.0353812, 0.0000000,
     0.1392321,-0.0197776,-0.0258764, 0.0000000,
     0.1406614,-0.0197640,-0.0163715, 0.0000000,
     0.1420907,-0.0197504,-0.0068667, 0.0000000,
     0.1435200,-0.0197369, 0.0026382, 0.0000000,
     0.1449494,-0.0197233, 0.0121430, 0.0000000,
     0.1463787,-0.0197097, 0.0216479, 0.0000000,
     0.1478080,-0.0196961, 0.0311527, 0.0000000,
     0.1492373,-0.0196825, 0.0406576, 0.0000000,
     0.1506666,-0.0196689, 0.0501624, 0.0000000,
     0.1520959,-0.0196553, 0.0596673, 0.0000000,
     0.2271496,-0.0069771, 0.0176550, 0.0000000,
     0.0988501,-0.0472540,-0.0620136, 0.0000000,
     0.2543639, 0.0236479,-0.0192494, 0.0000000,
     0.1117569,-0.1335155,-0.0322139, 0.0000000,
     0.0346183,-0.0208758,-0.0095346, 0.0000000,
     -0.0123672,-0.0079864, 0.0051977, 0.0000000,
     0.1139530, 0.1408029,-0.0204828, 0.0000000,
     0.1479337, 0.1048065,-0.0154462, 0.0000000,
     -0.0352252, 0.0205401, 0.0000000, 0.0000000,
     -0.0255975, 0.0901364, 0.0000000, 0.0000000,
     -0.3893459, 0.3437117, 0.0000000, 0.0000000,
     0.0160425, 0.0248659, 0.0000000, 0.0000000,
     -0.0046813,-0.0100437, 0.0000000, 0.0000000,
     -0.0287369,-0.0007993, 0.2805808, 0.0000000,
     -0.0001712,-0.0005280,-0.3206020, 0.0000000],dtype=np.float64).reshape(-1,4)

# Atomic level information
selfEnergy = np.array([ # h^l
     -10.707211,  0.000000,  0.000000,
     -23.716445, -1.822307,  0.000000,
     -4.900000, -2.217789,  0.000000,
     -7.743081, -3.133433,  0.000000,
     -9.224376, -7.419002,  0.000000,
     -13.970922,-10.063292,  0.000000,
     -16.686243,-12.523956,  0.000000,
     -20.229985,-15.503117,  0.000000,
     -23.458179,-15.746583,  0.000000,
     -24.500000,-18.737298, -5.517827,
     -4.546934, -1.332719,  0.000000,
     -6.339908, -0.697688, -1.458197,
     -9.329017, -5.927846, -3.042325,
     -14.360932, -6.915131, -1.825036,
     -17.518756, -9.842286, -0.444893,
     -20.029654,-11.377694, -0.420282,
     -29.278781,-12.673758, -0.240338,
     -16.487730,-13.910539, -1.167213,
     -4.510348, -0.934377,  0.000000,
     -5.056506, -1.150304, -0.776883,
     -5.196187, -8.877940, -2.008206,
     -7.234331,-10.900000, -1.928783,
     -9.015342, -9.573347, -0.706647,
     -7.209794, -9.201304, -0.696957,
     -10.120933, -5.617346, -4.198724,
     -10.035473, -5.402911, -3.308988,
     -10.580430, -8.596723, -2.585753,
     -12.712236, -8.524281, -2.878873,
     -9.506548, -6.922958, -2.267723,
     -7.177294, -0.991895,  0.000000,
     -12.449656, -4.469873, -0.582255,
     -16.369792, -8.207673, -0.994226,
     -16.421504, -9.311147, -0.276830,
     -20.584732,-10.910799, -0.110636,
     -23.583718,-12.588824,  0.047980,
     -17.221422,-13.633377, -0.940657,
     -4.353793, -1.392938,  0.000000,
     -6.291692, -1.872475, -0.890492,
     -8.015206,-12.194181, -0.966195,
     -7.409832,-10.199105, -1.066939,
     -8.440821,-11.384021, -0.103760,
     -7.995133, -7.336245, -3.686225,
     -9.587897, -6.792444, -3.325525,
     -10.285405, -5.332608, -3.307153,
     -11.756644, -7.850495, -3.007906,
     -11.963518, -9.714059, -2.035281,
     -9.591083, -8.083960, -2.934333,
     -7.252341, -0.744865,  0.000000,
     -13.040909, -4.507143, -0.805666,
     -19.970428, -7.367059, -2.077548,
     -18.371244, -7.350148,  0.909033,
     -21.930653, -9.480374,  0.978922,
     -20.949407,-12.180159, -0.266596,
     -19.090498,-11.249471, -0.497097,
     -4.041706, -1.394193,  0.000000,
     -5.900000, -2.133395, -1.514900,
     -8.958783,-11.877410, -0.601717,
     -7.381991, -8.537781, -3.017508,
     -7.280875, -8.504806, -2.873159,
     -7.179760, -8.471830, -2.728809,
     -7.078644, -8.438855, -2.584460,
     -6.977529, -8.405879, -2.440110,
     -6.876413, -8.372904, -2.295761,
     -6.775298, -8.339929, -2.151411,
     -6.674182, -8.306953, -2.007062,
     -6.573067, -8.273978, -1.862712,
     -6.471951, -8.241003, -1.718363,
     -6.370836, -8.208027, -1.574013,
     -6.269720, -8.175052, -1.429664,
     -6.168604, -8.142076, -1.285314,
     -6.067489, -8.109101, -1.140965,
     -7.181755,-10.626891, -1.603430,
     -8.481353,-13.073088,  0.655254,
     -9.501505,-11.093016, -1.420389,
     -11.189119,-12.685198, -3.851981,
     -10.382841, -8.731460, -3.546379,
     -11.018475, -9.349164, -3.603762,
     -12.047728,-10.482306, -3.778297,
     -9.578599, -7.688552,  0.883399,
     -11.538066, -2.532581,  0.000000,
     -17.319333, -4.460584,  0.000000,
     -24.055207, -5.893816,  0.000000,
     -19.843840, -7.297456,  0.000000,
     -20.205380, -8.476927,  0.000000,
     -17.050229, -9.499822, -0.096063,
     -21.000000,-10.496406, -1.415056],
     dtype=np.float64).reshape(-1,3)

# Exponent of the Slater function
slaterExponent = np.array([ #zeta_l
      1.230000,  0.000000,  0.000000,
      1.669667,  1.500000,  0.000000,
      0.750060,  0.557848,  0.000000,
      1.034720,  0.949332,  0.000000,
      1.479444,  1.479805,  0.000000,
      2.096432,  1.800000,  0.000000,
      2.339881,  2.014332,  0.000000,
      2.439742,  2.137023,  0.000000,
      2.416361,  2.308399,  0.000000,
      3.084104,  2.312051,  2.815609,
      0.763787,  0.573553,  0.000000,
      1.184203,  0.717769,  1.300000,
      1.352531,  1.391201,  1.000000,
      1.773917,  1.718996,  1.250000,
      1.816945,  1.903247,  1.167533,
      1.981333,  2.025643,  1.702555,
      2.485265,  2.199650,  2.476089,
      2.329679,  2.149419,  1.950531,
      0.875961,  0.631694,  0.000000,
      1.267130,  0.786247,  1.380000,
      2.440000,  1.358701,  1.019252,
      1.849994,  1.469983,  0.957410,
      1.673577,  1.383176,  0.938025,
      1.568211,  1.395427,  1.080270,
      1.839250,  1.222190,  1.240215,
      1.911049,  1.022393,  1.294467,
      2.326507,  1.464221,  1.298678,
      2.430756,  1.469945,  1.317046,
      2.375425,  1.550837,  1.984703,
      1.664847,  1.176434,  0.000000,
      1.720919,  1.591570,  1.050000,
      1.990429,  1.830340,  1.100000,
      2.026128,  1.949257,  1.040181,
      2.230969,  2.150656,  1.317549,
      2.077587,  2.263120,  1.845038,
      2.445680,  2.210494,  1.884991,
      1.017267,  0.870130,  0.000000,
      1.419028,  0.928932,  1.500000,
      2.670141,  1.633876,  1.165412,
      2.238668,  1.702480,  1.129590,
      1.706832,  1.666463,  1.132172,
      1.777658,  1.639917,  1.159781,
      1.918066,  1.918167,  1.346082,
      2.102697,  1.749643,  1.348322,
      2.458187,  1.811796,  1.398452,
      2.353691,  1.828354,  1.333352,
      2.843549,  1.798462,  1.266649,
      1.846689,  1.141823,  0.000000,
      1.963283,  1.685138,  1.050000,
      2.551510,  1.893784,  1.100000,
      2.307407,  2.179752,  1.256087,
      2.434144,  2.182459,  1.373076,
      2.159500,  2.308379,  1.691185,
      2.715140,  2.312510,  1.855707,
      1.225688,  0.823818,  0.000000,
      1.528102,  0.991572,  1.500000,
      2.875048,  1.731390,  1.303590,
      2.870000,  1.725197,  1.309804,
      2.872308,  1.729767,  1.315495,
      2.874615,  1.734337,  1.321186,
      2.876923,  1.738907,  1.326877,
      2.879231,  1.743478,  1.332567,
      2.881538,  1.748048,  1.338258,
      2.883846,  1.752618,  1.343949,
      2.886154,  1.757188,  1.349640,
      2.888462,  1.761758,  1.355331,
      2.890769,  1.766328,  1.361022,
      2.893077,  1.770899,  1.366713,
      2.895385,  1.775469,  1.372403,
      2.897692,  1.780039,  1.378094,
      2.900000,  1.784609,  1.383785,
      2.638729,  2.194333,  1.427467,
      2.018969,  1.996498,  1.407714,
      2.155885,  1.892022,  1.458186,
      2.262783,  2.187549,  1.636996,
      2.509631,  2.173991,  1.597888,
      2.756134,  2.117548,  1.680343,
      2.704492,  2.329136,  1.623286,
      3.241287,  2.183171,  2.084484,
      2.244504,  1.470848,  0.000000,
      2.294231,  1.731592,  0.000000,
      2.960592,  1.953130,  0.000000,
      2.788267,  2.277039,  0.000000,
      3.314810,  2.389456,  0.000000,
      2.220421,  2.408112,  1.500000,
      3.109394,  2.541934,  1.790000],dtype=np.float64).reshape(-1,3)


# Atomic Radii of the Elements
atomicRadii = aatoau * np.array([ #zeta_l
      0.32, 0.37, 1.30, 0.99, 0.84, 0.75, 0.71, 0.64,
      0.60, 0.62, 1.60, 1.40, 1.24, 1.14, 1.09, 1.04,
      1.00, 1.01, 2.00, 1.74, 1.59, 1.48, 1.44, 1.30,
      1.29, 1.24, 1.18, 1.17, 1.22, 1.20, 1.23, 1.20,
      1.20, 1.18, 1.17, 1.16, 2.15, 1.90, 1.76, 1.64,
      1.56, 1.46, 1.38, 1.36, 1.34, 1.30, 1.36, 1.40,
      1.42, 1.40, 1.40, 1.37, 1.36, 1.36, 2.38, 2.06,
      1.94, 1.84, 1.90, 1.88, 1.86, 1.85, 1.83, 1.82,
      1.81, 1.80, 1.79, 1.77, 1.77, 1.78, 1.74, 1.64,
      1.58, 1.50, 1.41, 1.36, 1.32, 1.30, 1.30, 1.32,
      1.44, 1.45, 1.50, 1.42, 1.48, 1.46, 2.42, 2.11,
      2.01, 1.90, 1.84, 1.83, 1.80, 1.80, 1.73, 1.68,
      1.68, 1.68, 1.65, 1.67, 1.73, 1.76, 1.61, 1.57,
      1.49, 1.43, 1.41, 1.34, 1.29, 1.28, 1.21, 1.22,
      1.36, 1.43, 1.62, 1.75, 1.65, 1.57])

kEN = 0.02
paulingEN = np.array([
     2.20,3.00, # H,He
     0.98,1.57,2.04,2.55,3.04,3.44,3.98,4.50, # Li-Ne
     0.93,1.31,1.61,1.90,2.19,2.58,3.16,3.50, # Na-Ar
     0.82,1.00, # K,Ca
                     1.36,1.54,1.63,1.66,1.55, # Sc-
                     1.83,1.88,1.91,1.90,1.65, # -Zn
                     1.81,2.01,2.18,2.55,2.96,3.00, # Ga-Kr
     0.82,0.95, # Rb,Sr
                     1.22,1.33,1.60,2.16,1.90, # Y-
                     2.20,2.28,2.20,1.93,1.69, # -Cd
                     1.78,1.96,2.05,2.10,2.66,2.60, # In-Xe
     0.79,0.89, # Cs,Ba
             1.10,1.12,1.13,1.14,1.15,1.17,1.18, # La-Eu
             1.20,1.21,1.22,1.23,1.24,1.25,1.26, # Gd-Yb
                     1.27,1.30,1.50,2.36,1.90, # Lu-
                     2.20,2.20,2.28,2.54,2.00, # -Hg
                     1.62,2.33,2.02,2.00,2.20,2.20, # Tl-Rn
       # only dummies below
     1.50,1.50, # Fr,Ra
             1.50,1.50,1.50,1.50,1.50,1.50,1.50, # Ac-Am
             1.50,1.50,1.50,1.50,1.50,1.50,1.50, # Cm-No
                     1.50,1.50,1.50,1.50,1.50, # Rf-
                     1.50,1.50,1.50,1.50,1.50, # Rf-Cn
                     1.50,1.50,1.50,1.50,1.50,1.50 ],dtype=np.float64)  # Nh-Og

# MULTIPOLE DATA
#Cutoff radii for multipole electrostatics
multiRad = np.array([ # R^A_0
  1.4, 3.0, 5.0, 5.0, 5.0, 3.0, 1.9, 1.8, 2.4, 
  5.0, 5.0, 5.0, 5.0, 3.9, 2.1, 3.1, 2.5, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 3.9, 4.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 
  5.0], dtype=np.float64)

#Valence coordination number for radii
valenceCN = np.array([
  1.0, 1.0, 1.0, 2.0, 3.0, 3.0, 3.0, 2.0, 1.0, 
  1.0, 1.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 1.0, 
  1.0, 2.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 
  4.0, 4.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 1.0, 
  1.0, 2.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 
  4.0, 4.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 1.0, 
  1.0, 2.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 
  6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 4.0, 
  6.0, 6.0, 6.0, 6.0, 6.0, 4.0, 4.0, 2.0, 3.0, 
  3.0, 3.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0], dtype=np.float64)

N_val = np.array([ 
  1, 1, 0, 0, 0, 3, 3, 2, 1, 
  0, 0, 0, 0, 3, 3, 3, 1, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 3, 1, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0], dtype=np.float64)


llao = [1,3,6,10]
llao2 = [1,3,5,7]
itt = [0,1,4,10]

lx = [
  0,
  1,0,0,
  2,0,0,1,1,0,
  3,0,0,2,2,1,0,1,0,1,
  4,0,0,3,3,1,0,1,0,2,2,0,2,1,1,
  5,0,0,3,3,2,2,0,0,4,4,1,0,0,1,1,3,1,2,2,1,
  6,0,0,3,3,0,5,5,1,0,0,1,4,4,2,0,2,0,3,3,1,2,2,1,4,1,1,2
]

ly = [
  0,
  0,1,0,
  0,2,0,1,0,1,
  0,3,0,1,0,2,2,0,1,1,
  0,4,0,1,0,3,3,0,1,2,0,2,1,2,1,
  0,5,0,2,0,3,0,3,2,1,0,4,4,1,0,1,1,3,2,1,2,
  0,6,0,3,0,3,1,0,0,1,5,5,2,0,0,2,4,4,2,1,3,1,3,2,1,4,1,2
]

lz = [
  0,
  0,0,1,
  0,0,2,0,1,1,
  0,0,3,0,1,0,1,2,2,1,
  0,0,4,0,1,0,1,3,3,0,2,2,1,1,2,
  0,0,5,0,2,0,3,2,3,0,1,0,1,4,4,3,1,1,1,2,2,
  0,0,6,0,3,3,0,1,5,5,1,0,0,2,4,4,0,2,1,2,2,3,1,3,1,1,4,2
]

trafo = np.array([ # copied from scf.f, simplified
  # --- dS
  sqrt(1.0/5.0),
  sqrt(1.0/5.0),
  sqrt(1.0/5.0),
  0.0,0.0,0.0,
  # --- dx²-y²
  0.5*sqrt(3.0),
  -0.5*sqrt(3.0),
  0.0,0.0,0.0,0.0,
  # --- dz²
  0.5,0.5,-1.0,
  0.0,0.0, 0.0,
  # --- rest
  0.0,0.0,0.0,1.0,0.0,0.0,
  0.0,0.0,0.0,0.0,1.0,0.0,
  0.0,0.0,0.0,0.0,0.0,1.0
], dtype=np.float64).reshape(6,6)

wExp = 0.5

kScale = np.array([
  [1.85, 2.04, 2.  , 2.04],
  [2.04, 2.23, 2.  , 2.23],
  [2.  , 2.  , 2.23, 2.23],
  [2.04, 2.23, 2.23, 2.23]
], dtype=np.float64)

pairParam = np.full((maxElem, maxElem), 1.0, dtype=np.float64)

enshell = [2.0, 2.0, 2.0, 2.0]

enScale = np.array([
  [0.02, 0.02, 0.02, 0.02],
  [0.02, 0.02, 0.02, 0.02],
  [0.02, 0.02, 0.02, 0.02],
  [0.02, 0.02, 0.02, 0.02]
], dtype=np.float64)

enScale4 = 0.0

electronegativity = paulingEN[:maxElem]

# Values from param_gfn2-xtb.txt
kdiff = 2.0
ksd = 2.0

def generateValenceShellData(nShell, angShell):
    mShell = np.max(nShell)
    valenceShell = np.zeros((maxElem, mShell), dtype=int)
    for iZp in range(nShell.shape[0]):
        valShell = np.full(4, True, dtype=bool)
        for iSh in range(nShell[iZp]):
            lAng = angShell[iZp, iSh]
            if (valShell[lAng]):
                valShell[lAng] = False
                valenceShell[iZp, iSh] = 1

    return valenceShell

def generateValenceShellData_simple(nShell, angShell):
    mShell = np.max(nShell)
    valenceShell = np.zeros((maxElem, mShell), dtype=int)
    for atom in range(maxElem):
        is_first_subshell_with_angular_momentum = [1,1,1,1]
        for subshell in range(nShell[atom]):
            angular_momentum = angShell[atom, subshell]
            valenceShell[atom, subshell] = is_first_subshell_with_angular_momentum[angular_momentum]
            is_first_subshell_with_angular_momentum[angular_momentum] = 0
    return valenceShell
valenceShell = generateValenceShellData(nShell, angShell)
#print("valShell\n", valenceShell)

#subroutine setGFN2NumberOfPrimitives(self, nShell)
#
#   !> Data instance
#   type(THamiltonianData), intent(inout) :: self
#
#   !> Number of shells
#   integer, intent(in) :: nShell(:)
#
#   integer :: nPrim, iZp, iSh
#
#   do iZp = 1, maxElem
#      do iSh = 1, nShell(iZp)
#         nPrim = 0
#         if (iZp <= 2) then
#            select case(self%angShell(iSh, iZp))
#            case(0)
#               nPrim = 3
#            case(1)
#               nPrim = 4
#            end select
#         else
#            select case(self%angShell(iSh, iZp))
#            case(0)
#               if (self%principalQuantumNumber(iSh, iZp) > 5) then
#                  nPrim = 6
#               else
#                  nPrim = 4
#               end if
#            case(1)
#               if (self%principalQuantumNumber(iSh, iZp) > 5) then
#                  nPrim = 6
#               else
#                  nPrim = 4
#               end if
#            case(2)
#               nPrim = 3
#            case(3)
#               nPrim = 4
#            end select
#         end if
#         self%numberOfPrimitives(iSh, iZp) = nPrim
#      end do
#   end do
def setGFN2NumberOfPrimitives():
    mShell = np.max(nShell)
    numberOfPrimitives = np.zeros((maxElem, mShell), dtype=int)
    for iZp in range(0,maxElem):
        for iSh in range(0,nShell[iZp]):
            nPrim = 0
            if iZp <= 2:
                match angShell[iZp,iSh]:
                    case 0:
                        nPrim = 3
                    case 1:
                        nPrim = 4
            else:
                match angShell[iZp,iSh]:
                    case 0:
                        if principalQuantumNumber[iZp,iSh] > 5:
                            nPrim = 6
                        else: 
                            nPrim = 4
                    case 1:
                        if principalQuantumNumber[iZp,iSh] > 5:
                            nPrim = 6
                        else:
                            nPrim = 4
                    case 2:
                        nPrim = 3
                    case 3:
                        nPrim = 4
            numberOfPrimitives[iZp, iSh] = nPrim
    return numberOfPrimitives
numberOfPrimitives = setGFN2NumberOfPrimitives()
#
#end subroutine setGFN2NumberOfPrimitives
#
#
#subroutine setGFN2ThirdOrderShell(thirdOrderShell, nShell, angShell, &
#      & thirdOrderAtom, gam3Shell)
#
#   real(wp), intent(out) :: thirdOrderShell(:, :)
#
#   integer, intent(in) :: nShell(:)
#
#   integer, intent(in) :: angShell(:, :)
#
#   real(wp), intent(in) :: thirdOrderAtom(:)
#
#   real(wp), intent(in) :: gam3Shell(:, 0:)
#
#   integer :: nElem, iZp, iSh, lAng, iKind
#
#   nElem = min(size(thirdOrderShell, dim=2), size(nShell), size(angShell, dim=2), &
#      & size(thirdOrderAtom))
#
#   thirdOrderShell(:, :) = 0.0_wp
#   do iZp = 1, maxElem
#      iKind = gfn2Kinds(iZp)
#      do iSh = 1, nShell(iZp)
#         lAng = angShell(iSh, iZp)
#         thirdOrderShell(iSh, iZp) = thirdOrderAtom(iZp) * gam3Shell(iKind, lAng)
#      end do
#   end do
#
#end subroutine setGFN2ThirdOrderShell
